Feelin' Groovy?
Question 1
The make_predictions-classifier.groovy script discussed in the previous video (A challenge, and some Groovy) does the same job as the make_predictions-classifier.py script discussed in the earlier Building models video: they both create a J48 model from anneal_train.arff and use it to obtain predictions for anneal_unlbl.arff.
But there are several differences. Examine both scripts; run them; and then answer the following questions.
They use the same classifier but with different parameters.
True
False
---
Correct answer(s):
False
---
Feedback correct:
They both use the J48 classifier with the parameter “–C 0.3”

Question 2
Which script prints the model?
Neither
Python
Groovy
Both
---
Correct answer(s):
Groovy
---
Feedback correct:
The model is printed by the line println(cls) in the Groovy script

Question 3
Which script prints the labels of the class attribute?
Neither
Python
Groovy
Both
---
Correct answer(s):
Groovy
---
Feedback correct:
The labels of the class attribute are printed by the line println(“#: “ + labels.join(“,”)) in the Groovy script

Question 4
Which script prints the prediction probabilities for each instance?
Neither
Python
Groovy
Both
---
Correct answer(s):
Both
---
Feedback correct:
The last code line of each script prints the prediction probabilities

Question 5
Let’s change the make_predictions-classifier.groovy script to print J48’s tree size for various values of the M parameter, which determines the minimum number of instances allowed at each leaf.
Delete the last few statements in the script to stop it printing class labels and predictions for the test set. Change the line println(cls) to println(cls.measureTreeSize()), which prints just the tree size (41 nodes). Change the setOptions part of make_predictions-classifier.groovy to set the M parameter instead of C.
Use this Groovy “for” loop
for (i in 1..10) {
 ...
}
to increase the value of the M parameter from 1 to 10, printing the tree size each time.
You’d expect the size to decay steadily as M increases. But it doesn’t. For what value does it rise?
2
3
4
5
6
7
---
Correct answer(s):
6
---
Feedback correct:
For M=6 it rises (to 42) for the first time, and decays again thereafter

Question 6
The remaining activities are for people who intend to actually use Groovy for scripting.
Try these Groovy statements to see which of them outputs 1, 3, 5.
0.step(6, 2) {println(it+1)}
1.step(5, 2) {println(it)}
---
Correct answer(s):
0.step(6, 2) {println(it+1)}
---
Feedback correct:
Now you can figure out what “step” does
---
Feedback incorrect:
This just prints 1 and 3

Question 7
Try printing the structures below.
Which one is not a valid Groovy list?
[1, 2, 3]
(1, 2, 3)
[1, “2”, 3]
---
Correct answer(s):
(1, 2, 3)
---
Feedback correct:
Try printing it with “println((1,2,3))”; you’ll get an error

Question 8
This is a Groovy “map”:
    m = [10: "me", 11: "you", 12: "others"]
Determine by experiment which of these expressions retrieves the value you.
m[11]
m[“11”]
m(11)
m(“11”)
---
Correct answer(s):
m[11]
---
Feedback correct:
Print it out:
    m = [10: "me", 11: "you", 12: "others"]
    println(m[11])

Question 9
Which of these statements iterates over all row indices in dataset data?
1.upto(data.numInstances()) {…}
data.numInstances().times {…}
---
Correct answer(s):
data.numInstances().times {…}
---
Feedback correct:
“.times” is used in both make_predictions-classifier.groovy and roc_multiple.groovy. Copy the first few lines of make_predictions-classifier.groovy (up to and including the line beginning data =), and append data.numInstances().times {println(it)}. The loop variable in Groovy is called “it”.

Question 10
How do you combine all elements in list a into a single string, using a comma as separator?
a.combine(“,”)
a.join(“,”)
a.toString(“,”)
---
Correct answer(s):
a.join(“,”)
---
Feedback correct:
It’s used in make_predictions-classifier.groovy.
Try
    println([1,2,3].join(","))

Question 10
How do you combine all elements in list a into a single string, using a comma as separator?
a.combine(“,”)
a.join(“,”)
a.toString(“,”)
---
Correct answer(s):
